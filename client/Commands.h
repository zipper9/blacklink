#ifndef COMMANDS_H_
#define COMMANDS_H_

#include "typedefs.h"

namespace Commands
{

enum
{
	COMMAND_CLEAR,
	COMMAND_FIND_TEXT,
	COMMAND_CLOSE,
	COMMAND_JOIN,
	COMMAND_ADD_FAVORITE,
	COMMAND_REMOVE_FAVORITE,
	COMMAND_SHOW_JOINS,
	COMMAND_FAV_SHOW_JOINS,
	COMMAND_TIMESTAMPS,
	COMMAND_INFO_CONNECTION,
	COMMAND_AWAY,
	COMMAND_LIMIT,
	COMMAND_SET_SLOTS,
	COMMAND_SET_EXTRA_SLOTS,
	COMMAND_SET_SMALL_FILE_SIZE,
	COMMAND_REFRESH_SHARE,
	COMMAND_MAKE_FILE_LIST,
	COMMAND_SHARE_FILE,
	COMMAND_SAVE_QUEUE,
	COMMAND_FLUSH_STATS,
	COMMAND_PASSWORD,
	COMMAND_TOGGLE_USER_LIST,
	COMMAND_USER_LIST_LOCATION,
	COMMAND_PRIVATE_MESSAGE,
	COMMAND_MC_PRIVATE_MESSAGE,
	COMMAND_GET_LIST,
	COMMAND_GRANT_EXTRA_SLOT,
	COMMAND_UNGRANT_EXTRA_SLOT,
	COMMAND_CCPM,
	COMMAND_IP_UPDATE,
	COMMAND_INFO_VERSION,
	COMMAND_INFO_UPTIME,
	COMMAND_INFO_SPEED,
	COMMAND_INFO_STORAGE,
	COMMAND_INFO_DISK_SPACE,
	COMMAND_INFO_SYSTEM,
	COMMAND_INFO_CPU,
	COMMAND_INFO_STATS,
	COMMAND_INFO_RATIO,
	COMMAND_INFO_DB,
	COMMAND_SEARCH,
	COMMAND_SHOW_IGNORE_LIST,
	COMMAND_SHOW_EXTRA_SLOTS,
	COMMAND_MEDIA_PLAYER,
	COMMAND_WEB_SEARCH,
	COMMAND_OPEN_URL,
	COMMAND_OPEN_LOG,
	COMMAND_SHUTDOWN,
	COMMAND_WHOIS,
	COMMAND_GEOIP,
	COMMAND_PG_INFO,
	COMMAND_USER,
	COMMAND_USER_CONNECTIONS,
	COMMAND_USER_IP,
	COMMAND_QUEUE,
	COMMAND_DHT,
	COMMAND_TTH,
	COMMAND_IP_BANS,
	COMMAND_DEBUG_ADD_TREE,
	COMMAND_DEBUG_DISABLE,
	COMMAND_DEBUG_BLOOM,
	COMMAND_DEBUG_MYSHARE,
	COMMAND_DEBUG_GDI_INFO,
	COMMAND_DEBUG_HTTP,
	COMMAND_DEBUG_UNKNOWN_TAGS,
	COMMAND_DEBUG_DIVIDE,
	COMMAND_SAY,
	COMMAND_ME,
	COMMAND_LAST_NICK,
	COMMAND_HELP,
	NR_COMMANDS
};

struct CommandDescription
{
	unsigned flags;
	unsigned minArgs;
	unsigned maxArgs;
	int infoText;
};

enum
{
	CTX_SYSTEM         = 1,
	CTX_HUB            = 2,
	CTX_USER           = 4,
	FLAG_SPLIT_ARGS    = 8,
	FLAG_GET_FIRST_ARG = 16,
	FLAG_UI            = 32,
	FLAG_GENERAL_CHAT  = 64
};

struct ParsedCommand
{
	int command;
	StringList args;
	uint64_t frameId;
};

bool parseCommand(const string& str, ParsedCommand& cmd);
bool checkArguments(const ParsedCommand& cmd, string& errorText);

struct Result
{
	int what;
	string text;
};

enum
{
	RESULT_LOCAL_TEXT,
	RESULT_TEXT,
	RESULT_ERROR_MESSAGE,
	RESULT_NO_TEXT,
	RESULT_HELP_TEXT
};

bool processCommand(const ParsedCommand& cmd, Result& res);
bool isPublic(const StringList& args);

enum
{
	GHT_MARK_ALIASES = 1
};

string getHelpText(unsigned flags = 0);

}

#endif // COMMANDS_H_
